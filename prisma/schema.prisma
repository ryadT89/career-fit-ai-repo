generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id               String   @id @default(cuid())
    name             String
    email            String   @unique
    password         String
    userType         String?   // Either "Recruiter" or "Candidate"
    registeredAt     DateTime @default(now())
    lastLogin        DateTime?

    candidateProfile CandidateProfile?
    recruiterProfile RecruiterProfile?

    accounts         Account[]
    sessions         Session[]

    @@map("users")
}

model CandidateProfile {
    id                   Int               @id @default(autoincrement())
    userId               String            @unique
    user                 User              @relation(fields: [userId], references: [id])
    skills               String
    experience           Int
    location             String
    interestSectors      String?
    resume               String?

    applications         Application[]
    matches              Match[]
    candidateInvitations Invitation[]      @relation("CandidateInvitations")

    @@map("candidate_profiles")
}

model RecruiterProfile {
    id                   Int               @id @default(autoincrement())
    userId               String            @unique
    user                 User              @relation(fields: [userId], references: [id])
    company              String
    website              String?
    sector               String
    description          String?

    jobListings          JobListing[]
    invitations          Invitation[]      @relation("RecruiterInvitations")

    @@map("recruiter_profiles")
}

model Invitation {
    id                   Int               @id @default(autoincrement())
    recruiterId          Int
    recruiter            RecruiterProfile  @relation("RecruiterInvitations", fields: [recruiterId], references: [id])
    candidateId          Int
    candidate            CandidateProfile  @relation("CandidateInvitations", fields: [candidateId], references: [id])
    jobListingId         Int
    jobListing           JobListing        @relation(fields: [jobListingId], references: [id])
    message              String?
    invitedAt            DateTime          @default(now())

    @@map("invitations")
}

model JobListing {
    id                Int              @id @default(autoincrement())
    title             String
    description       String
    recruiterId       Int
    recruiter         RecruiterProfile @relation(fields: [recruiterId], references: [id])
    location          String
    status            String           // "open" or "filled"
    createdAt         DateTime @default(now())
    requiredSkills    String
    requiredExperience Int

    applications      Application[]
    matches           Match[]
    invitations       Invitation[]

    @@map("job_listings")
}

model Application {
    id                Int               @id @default(autoincrement())
    jobListingId      Int
    jobListing        JobListing        @relation(fields: [jobListingId], references: [id])
    candidateId       Int
    candidate         CandidateProfile  @relation(fields: [candidateId], references: [id])
    appliedAt         DateTime          @default(now())
    status            String            // "submitted", "in_progress", "rejected", "accepted"

    @@map("applications")
}

model Match {
    id               Int               @id @default(autoincrement())
    jobListingId     Int
    jobListing       JobListing        @relation(fields: [jobListingId], references: [id])
    candidateId      Int
    candidate        CandidateProfile  @relation(fields: [candidateId], references: [id])
    relevanceScore   Float
    matchedAt        DateTime          @default(now())

    @@map("matches")
}
